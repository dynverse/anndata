[{"path":[]},{"path":"https://anndata.dynverse.org/CONDUCT.html","id":"our-pledge","dir":"","previous_headings":"","what":"Our Pledge","title":"Contributor Covenant Code of Conduct","text":"members, contributors, leaders pledge make participation community harassment-free experience everyone, regardless age, body size, visible invisible disability, ethnicity, sex characteristics, gender identity expression, level experience, education, socio-economic status, nationality, personal appearance, race, religion, sexual identity orientation. pledge act interact ways contribute open, welcoming, diverse, inclusive, healthy community.","code":""},{"path":"https://anndata.dynverse.org/CONDUCT.html","id":"our-standards","dir":"","previous_headings":"","what":"Our Standards","title":"Contributor Covenant Code of Conduct","text":"Examples behavior contributes positive environment community include: Demonstrating empathy kindness toward people respectful differing opinions, viewpoints, experiences Giving gracefully accepting constructive feedback Accepting responsibility apologizing affected mistakes, learning experience Focusing best just us individuals, overall community Examples unacceptable behavior include: use sexualized language imagery, sexual attention advances kind Trolling, insulting derogatory comments, personal political attacks Public private harassment Publishing others’ private information, physical email address, without explicit permission conduct reasonably considered inappropriate professional setting","code":""},{"path":"https://anndata.dynverse.org/CONDUCT.html","id":"enforcement-responsibilities","dir":"","previous_headings":"","what":"Enforcement Responsibilities","title":"Contributor Covenant Code of Conduct","text":"Community leaders responsible clarifying enforcing standards acceptable behavior take appropriate fair corrective action response behavior deem inappropriate, threatening, offensive, harmful. Community leaders right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct, communicate reasons moderation decisions appropriate.","code":""},{"path":"https://anndata.dynverse.org/CONDUCT.html","id":"scope","dir":"","previous_headings":"","what":"Scope","title":"Contributor Covenant Code of Conduct","text":"Code Conduct applies within community spaces, also applies individual officially representing community public spaces. Examples representing community include using official e-mail address, posting via official social media account, acting appointed representative online offline event.","code":""},{"path":"https://anndata.dynverse.org/CONDUCT.html","id":"enforcement","dir":"","previous_headings":"","what":"Enforcement","title":"Contributor Covenant Code of Conduct","text":"Instances abusive, harassing, otherwise unacceptable behavior may reported community leaders responsible enforcement [admin@data-intuitive.com]. complaints reviewed investigated promptly fairly. community leaders obligated respect privacy security reporter incident.","code":""},{"path":"https://anndata.dynverse.org/CONDUCT.html","id":"enforcement-guidelines","dir":"","previous_headings":"","what":"Enforcement Guidelines","title":"Contributor Covenant Code of Conduct","text":"Community leaders follow Community Impact Guidelines determining consequences action deem violation Code Conduct:","code":""},{"path":"https://anndata.dynverse.org/CONDUCT.html","id":"id_1-correction","dir":"","previous_headings":"Enforcement Guidelines","what":"1. Correction","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Use inappropriate language behavior deemed unprofessional unwelcome community. Consequence: private, written warning community leaders, providing clarity around nature violation explanation behavior inappropriate. public apology may requested.","code":""},{"path":"https://anndata.dynverse.org/CONDUCT.html","id":"id_2-warning","dir":"","previous_headings":"Enforcement Guidelines","what":"2. Warning","title":"Contributor Covenant Code of Conduct","text":"Community Impact: violation single incident series actions. Consequence: warning consequences continued behavior. interaction people involved, including unsolicited interaction enforcing Code Conduct, specified period time. includes avoiding interactions community spaces well external channels like social media. Violating terms may lead temporary permanent ban.","code":""},{"path":"https://anndata.dynverse.org/CONDUCT.html","id":"id_3-temporary-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"3. Temporary Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: serious violation community standards, including sustained inappropriate behavior. Consequence: temporary ban sort interaction public communication community specified period time. public private interaction people involved, including unsolicited interaction enforcing Code Conduct, allowed period. Violating terms may lead permanent ban.","code":""},{"path":"https://anndata.dynverse.org/CONDUCT.html","id":"id_4-permanent-ban","dir":"","previous_headings":"Enforcement Guidelines","what":"4. Permanent Ban","title":"Contributor Covenant Code of Conduct","text":"Community Impact: Demonstrating pattern violation community standards, including sustained inappropriate behavior, harassment individual, aggression toward disparagement classes individuals. Consequence: permanent ban sort public interaction within community.","code":""},{"path":"https://anndata.dynverse.org/CONDUCT.html","id":"attribution","dir":"","previous_headings":"","what":"Attribution","title":"Contributor Covenant Code of Conduct","text":"Code Conduct adapted Contributor Covenant, version 2.0, available https://www.contributor-covenant.org/version/2/0/code_of_conduct.html. Community Impact Guidelines inspired Mozilla’s code conduct enforcement ladder. answers common questions code conduct, see FAQ https://www.contributor-covenant.org/faq. Translations available https://www.contributor-covenant.org/translations.","code":""},{"path":"https://anndata.dynverse.org/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing","title":"Contributing","text":"welcome contributions project, changes documentation, bug fixes, new functionality, even new packages fit scope project. participating project, agree abide code conduct.","code":""},{"path":"https://anndata.dynverse.org/CONTRIBUTING.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting Started","title":"Contributing","text":"Make sure GitHub account. familar git GitHub, take look http://happygitwithr.com/ get started. Submit post issue problem suggestion, assuming one already exist. Clearly describe issue, including steps reproduce bug, justification proposed improvement. Fork repository GitHub make copy repository account.","code":""},{"path":"https://anndata.dynverse.org/CONTRIBUTING.html","id":"making-changes","dir":"","previous_headings":"","what":"Making changes","title":"Contributing","text":"Edit files, save often, make commits logical units, commit indicates one concept. Follow tidyverse style guide. Make sure write good commit messages. Add unit test added functionality bug fixed. Run tests using rcmdcheck::rcmdcheck() assure nothing else accidentally broken. Edit NEWS.md file describe changes made. need help unsure anything, post update issue.","code":""},{"path":"https://anndata.dynverse.org/CONTRIBUTING.html","id":"submitting-your-changes","dir":"","previous_headings":"","what":"Submitting your changes","title":"Contributing","text":"Push fork submit pull request. point ’re waiting us. like least comment pull requests within days (, typically, one business day). may suggest changes improvements alternatives.","code":""},{"path":"https://anndata.dynverse.org/CONTRIBUTING.html","id":"tips","dir":"","previous_headings":"","what":"Tips","title":"Contributing","text":"things can increase chance pull request dealt timely manner: Engage discussion issue. familiar background literature cited README. Follow code style guide. Write good commit message. Document changes NEWS.md file. Write unit tests changes made.","code":""},{"path":"https://anndata.dynverse.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2020 Robrecht Cannoodt Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://anndata.dynverse.org/articles/getting_started.html","id":"creating-an-anndata-object","dir":"Articles","previous_headings":"","what":"Creating an AnnData object","title":"Getting started","text":"AnnData() stores data matrix X together annotations observations obs (obsm, obsp), variables var (varm, varp), unstructured annotations uns. example create AnnData object 2 observations 3 variables. can read information back using $ notation.","code":"library(anndata)  ad <- AnnData(   X = matrix(1:6, nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L, 3L), row.names = c(\"var1\", \"var2\", \"var3\")),   layers = list(     spliced = matrix(4:9, nrow = 2),     unspliced = matrix(8:13, nrow = 2)   ),   obsm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   varm = list(     ones = matrix(rep(1L, 12), nrow = 3),     rand = matrix(rnorm(6), nrow = 3),     zeros = matrix(rep(0L, 12), nrow = 3)   ),   uns = list(     a = 1,     b = data.frame(i = 1:3, j = 4:6, value = runif(3)),     c = list(c.a = 3, c.b = 4)   ) )  ad #> AnnData object with n_obs × n_vars = 2 × 3 #>     obs: 'group' #>     var: 'type' #>     uns: 'a', 'b', 'c' #>     obsm: 'ones', 'rand', 'zeros' #>     varm: 'ones', 'rand', 'zeros' #>     layers: 'spliced', 'unspliced' ad$X #>    var1 var2 var3 #> s1    1    3    5 #> s2    2    4    6 ad$obs #>    group #> s1     a #> s2     b ad$obsm[[\"ones\"]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]    1    1    1    1    1 #> [2,]    1    1    1    1    1 ad$layers[[\"spliced\"]] #>    var1 var2 var3 #> s1    4    6    8 #> s2    5    7    9 ad$uns[[\"b\"]] #>   i j      value #> 1 1 4 0.08075014 #> 2 2 5 0.83433304 #> 3 3 6 0.60076089"},{"path":"https://anndata.dynverse.org/articles/getting_started.html","id":"reading-writing-anndata-objects","dir":"Articles","previous_headings":"Creating an AnnData object","what":"Reading / writing AnnData objects","title":"Getting started","text":"Read h5ad format:","code":"read_h5ad(\"pbmc_1k_protein_v3_processed.h5ad\")"},{"path":"https://anndata.dynverse.org/articles/getting_started.html","id":"creating-a-view","dir":"Articles","previous_headings":"Creating an AnnData object","what":"Creating a view","title":"Getting started","text":"can use regular R indexing methods subset AnnData object. result ‘View’ underlying data without needing store data twice.","code":"view <- ad[, 2] view #> View of AnnData object with n_obs × n_vars = 2 × 1 #>     obs: 'group' #>     var: 'type' #>     uns: 'a', 'b', 'c' #>     obsm: 'ones', 'rand', 'zeros' #>     varm: 'ones', 'rand', 'zeros' #>     layers: 'spliced', 'unspliced' view$is_view #> [1] TRUE  ad[, c(\"var1\", \"var2\")] #> View of AnnData object with n_obs × n_vars = 2 × 2 #>     obs: 'group' #>     var: 'type' #>     uns: 'a', 'b', 'c' #>     obsm: 'ones', 'rand', 'zeros' #>     varm: 'ones', 'rand', 'zeros' #>     layers: 'spliced', 'unspliced' ad[-1, ] #> View of AnnData object with n_obs × n_vars = 1 × 3 #>     obs: 'group' #>     var: 'type' #>     uns: 'a', 'b', 'c' #>     obsm: 'ones', 'rand', 'zeros' #>     varm: 'ones', 'rand', 'zeros' #>     layers: 'spliced', 'unspliced'"},{"path":"https://anndata.dynverse.org/articles/getting_started.html","id":"anndata-as-a-matrix","dir":"Articles","previous_headings":"Creating an AnnData object","what":"AnnData as a matrix","title":"Getting started","text":"X attribute can used R matrix: can access different layer matrix follows:","code":"ad$X[, c(\"var1\", \"var2\")] #>    var1 var2 #> s1    1    3 #> s2    2    4 ad$X[-1, , drop = FALSE] #>    var1 var2 var3 #> s2    2    4    6 ad$X[, 2] <- 10 ad$layers[\"unspliced\"] #>    var1 var2 var3 #> s1    8   10   12 #> s2    9   11   13 ad$layers[\"unspliced\"][, c(\"var2\", \"var3\")] #>    var2 var3 #> s1   10   12 #> s2   11   13"},{"path":"https://anndata.dynverse.org/articles/getting_started.html","id":"note-on-state","dir":"Articles","previous_headings":"Creating an AnnData object","what":"Note on state","title":"Getting started","text":"assign AnnData object another variable modify either, modified: standard Python behaviour R. order two separate copies AnnData object, use $copy() function:","code":"ad2 <- ad  ad$X[, 2] <- 10  list(ad = ad$X, ad2 = ad2$X) #> $ad #>    var1 var2 var3 #> s1    1   10    5 #> s2    2   10    6 #>  #> $ad2 #>    var1 var2 var3 #> s1    1   10    5 #> s2    2   10    6 ad3 <- ad$copy()  ad$X[, 2] <- c(3, 4)  list(ad = ad$X, ad3 = ad3$X) #> $ad #>    var1 var2 var3 #> s1    1    3    5 #> s2    2    4    6 #>  #> $ad3 #>    var1 var2 var3 #> s1    1   10    5 #> s2    2   10    6"},{"path":"https://anndata.dynverse.org/articles/scanpy_demo.html","id":"set-up","dir":"Articles","previous_headings":"","what":"Set up","title":"Demo with scanpy","text":"use another Python package (e.g. scanpy), need make sure installed ephemeral Python environment anndata uses. can let reticulate handle using py_require() function: TIP: Check vignette setting Python package environments reticulate: https://rstudio.github.io/reticulate/articles/python_packages.html.","code":"library(anndata) library(reticulate) py_require(\"scanpy\")"},{"path":"https://anndata.dynverse.org/articles/scanpy_demo.html","id":"download-and-load-dataset","dir":"Articles","previous_headings":"","what":"Download and load dataset","title":"Demo with scanpy","text":"Let’s use 10x dataset 10x genomics website. can download anndata object scanpy follows:","code":"sc <- import(\"scanpy\")  url <- \"https://cf.10xgenomics.com/samples/cell-exp/6.0.0/SC3_v3_NextGem_DI_CellPlex_CSP_DTC_Sorted_30K_Squamous_Cell_Carcinoma/SC3_v3_NextGem_DI_CellPlex_CSP_DTC_Sorted_30K_Squamous_Cell_Carcinoma_count_sample_feature_bc_matrix.h5\"  ad <- sc$read_10x_h5(\"dataset.h5\", backup_url = url)  ad #> AnnData object with n_obs × n_vars = 5377 × 36601 #>     var: 'gene_ids', 'feature_types', 'genome', 'pattern', 'read', 'sequence'"},{"path":"https://anndata.dynverse.org/articles/scanpy_demo.html","id":"preprocessing-dataset","dir":"Articles","previous_headings":"","what":"Preprocessing dataset","title":"Demo with scanpy","text":"resuling dataset wrapper Python class behaves much like R object: can still call scanpy functions , example perform preprocessing.","code":"ad[1:5, 3:5] #> View of AnnData object with n_obs × n_vars = 5 × 3 #>     var: 'gene_ids', 'feature_types', 'genome', 'pattern', 'read', 'sequence' dim(ad) #> [1]  5377 36601 sc$pp$filter_cells(ad, min_genes = 200) sc$pp$filter_genes(ad, min_cells = 3) sc$pp$normalize_per_cell(ad) sc$pp$log1p(ad)"},{"path":"https://anndata.dynverse.org/articles/scanpy_demo.html","id":"analysing-your-dataset-in-r","dir":"Articles","previous_headings":"","what":"Analysing your dataset in R","title":"Demo with scanpy","text":"can seamlessly switch back using dataset R functions, example calculating rowMeans expression matrix.","code":"library(Matrix) rowMeans(ad$X[1:10, ]) #> AAACCCAAGCGCGTTC-1 AAACCCAAGGCAATGC-1 AAACCCAGTATCTTCT-1 AAACCCAGTGACAACG-1  #>         0.05451418         0.13627126         0.12637224         0.13958617  #> AAACCCAGTTGAATCC-1 AAACCCATCGGCTTGG-1 AAACGAAAGAGAGCCT-1 AAACGAAAGCTTAAGA-1  #>         0.05979424         0.11365747         0.05011727         0.14347849  #> AAACGAAAGGCACGAT-1 AAACGAAAGGTAGCCA-1  #>         0.12979302         0.12366312"},{"path":"https://anndata.dynverse.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Philipp Angerer. Conceptor. Alex Wolf. Conceptor. Isaac Virshup. Conceptor. Sergei Rybakov. Conceptor. Robrecht Cannoodt. Author, maintainer, copyright holder.","code":""},{"path":"https://anndata.dynverse.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Cannoodt R (2025). anndata: 'anndata' R. R package version 0.8.0, https://anndata.dynverse.org.","code":"@Manual{,   title = {anndata: 'anndata' for R},   author = {Robrecht Cannoodt},   year = {2025},   note = {R package version 0.8.0},   url = {https://anndata.dynverse.org}, }"},{"path":"https://anndata.dynverse.org/index.html","id":"anndata-for-r","dir":"","previous_headings":"","what":"anndata for R","title":"anndata for R","text":"anndata commonly used Python package keeping track data learned annotations, can used read write h5ad file format. also main data format used scanpy python package (Wolf, Angerer, Theis 2018).  However, using scanpy/anndata R can major hassle. trying read h5ad file, R users approach problem one two ways. ) read file manually (since ’s H5 file), involves lot manual work lot understanding h5ad H5 file formats work (also, expect major headaches cryptic hdf5r bugs). B) interact scanpy anndata reticulate, run issues converting python objects R. recently published anndata CRAN, reticulate wrapper Python package – syntax sprinkled top make R users feel home. anndata R still active development github.com/dynverse/anndata. encounter issues, feel free post issue GitHub!","code":""},{"path":"https://anndata.dynverse.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"anndata for R","text":"can install anndata R CRAN follows: Normally, reticulate take care installing Miniconda Python anndata. , try running:","code":"install.packages(\"anndata\") reticulate::install_miniconda() anndata::install_anndata()"},{"path":"https://anndata.dynverse.org/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"anndata for R","text":"API anndata R similar Python counterpart. example: See ?anndata full list functions provided package. Check vignettes clicking links : Getting started Demo scanpy","code":"library(anndata) ##  ## Attaching package: 'anndata'  ## The following object is masked from 'package:readr': ##  ##     read_csv ad <- read_h5ad(\"example_formats/pbmc_1k_protein_v3_processed.h5ad\")  ad ## AnnData object with n_obs × n_vars = 713 × 33538 ##     var: 'gene_ids', 'feature_types', 'genome', 'highly_variable', 'means', 'dispersions', 'dispersions_norm' ##     uns: 'hvgParameters', 'normalizationParameters', 'pca', 'pcaParameters' ##     obsm: 'X_pca' ##     varm: 'PCs' Matrix::rowMeans(ad$X[1:10,]) ## AAACCCAAGTGGTCAG-1 AAAGGTATCAACTACG-1 AAAGTCCAGCGTGTCC-1 AACACACTCAAGAGTA-1  ##         0.06499579         0.06385104         0.06102355         0.06739055  ## AACACACTCGACGAGA-1 AACAGGGCAGGAGGTT-1 AACAGGGCAGTGTATC-1 AACAGGGTCAGAATAG-1  ##         0.08891241         0.08648681         0.09318970         0.09140243  ## AACCTGAAGATGGTCG-1 AACGGGATCGTTATCT-1  ##         0.06664118         0.07866523"},{"path":"https://anndata.dynverse.org/index.html","id":"future-work","dir":"","previous_headings":"","what":"Future work","title":"anndata for R","text":"cases, package may still act like Python package rather R package. helper functions helper classes need defined order fully encapsulate AnnData() objects. Examples ad$chunked_X(...), backed file modes, read_zarr() ad$write_zarr().","code":""},{"path":[]},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":null,"dir":"Reference","previous_headings":"","what":"Create an Annotated Data Matrix — AnnData","title":"Create an Annotated Data Matrix — AnnData","text":"AnnData stores data matrix X together annotations observations obs (obsm, obsp), variables var (varm, varp), unstructured annotations uns. AnnData object adata can sliced like data frame, instance adata_subset <- adata[, list_of_variable_names]. AnnData’s basic structure similar R's ExpressionSet. setting h5ad-formatted HDF5 backing file filename, data remains disk automatically loaded memory needed. See blog post details.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnData(   X = NULL,   obs = NULL,   var = NULL,   uns = NULL,   obsm = NULL,   varm = NULL,   layers = NULL,   raw = NULL,   dtype = \"float32\",   shape = NULL,   filename = NULL,   filemode = NULL,   obsp = NULL,   varp = NULL )"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Annotated Data Matrix — AnnData","text":"X #observations × #variables data matrix. view data used data type matches, otherwise, copy made. obs Key-indexed one-dimensional observations annotation length #observations. var Key-indexed one-dimensional variables annotation length #variables. uns Key-indexed unstructured annotation. obsm Key-indexed multi-dimensional observations annotation length #observations. passing ~numpy.ndarray, needs structured datatype. varm Key-indexed multi-dimensional variables annotation length #variables. passing ~numpy.ndarray, needs structured datatype. layers Key-indexed multi-dimensional arrays aligned dimensions X. raw Store raw version X var $raw$X $raw$var. dtype Data type used storage. shape Shape list (#observations, #variables). Can provided X NULL. filename Name backing file. See h5py.File. filemode Open mode backing file. See h5py.File. obsp Pairwise annotation observations, mutable mapping array-like values. varp Pairwise annotation observations, mutable mapping array-like values.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create an Annotated Data Matrix — AnnData","text":"AnnData stores observations (samples) variables/features rows matrix. convention modern classics statistic machine learning, convention dataframes R Python established statistics machine learning packages Python (statsmodels, scikit-learn). Single dimensional annotations observation variables stored obs var attributes data frames. intended metrics calculated axes. Multi-dimensional annotations stored obsm varm, aligned objects observation variable dimensions respectively. Square matrices representing graphs stored obsp varp, dimensions aligned associated axis. Additional measurements across observations variables stored layers. Indexing AnnData object can performed relative position numeric indices,  labels. avoid ambiguity numeric indexing observations variables, indexes AnnData object converted strings constructor. Subsetting AnnData object indexing also subset elements according dimensions aligned . means operation like adata[list_of_obs, ] also subset obs, obsm, layers. Subsetting AnnData object returns view original object, meaning little additional memory used upon subsetting. achieved lazily, meaning constituent arrays subset access. Copying view causes equivalent “real” AnnData object generated. Attempting modify view (attribute except X) handled copy--modify manner, meaning object initialized place. example   end snippet: adata modified, batch1 AnnData object data. Similar Bioconductor’s ExpressionSet scipy.sparse matrices, subsetting AnnData object retains dimensionality constituent arrays. Therefore, unlike classes exposed pandas, numpy, xarray, concept one dimensional AnnData object. AnnDatas always two inherent dimensions, obs var. Additionally, maintaining dimensionality AnnData object allows consistent handling scipy.sparse matrices numpy arrays.","code":"batch1 <- adata[adata$obs[\"batch\"] == \"batch1\", ] batch1$obs[\"value\"] = 0 # This makes batch1 a “real” AnnData object"},{"path":[]},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Create an Annotated Data Matrix — AnnData","text":"X Data matrix shape n_obs × n_vars. filename Name backing file. Change backing mode setting filename .h5ad file. Setting filename writes stored data disk. Setting filename filename previously another name moves backing file previous file new file. want copy previous file, use copy(filename='new_filename'). layers list-like object values dimensions X. Layers AnnData inspired loompy's layers. Overwrite layers:   Return layer named \"unspliced\":   Create replace \"spliced\" layer:   Assign 10th column layer \"spliced\" variable :   Delete \"spliced\":   Return layers' names:   T Transpose whole object. Data matrix transposed, observations variables interchanged. Ignores .raw. is_view TRUE object view another AnnData object, FALSE otherwise. isbacked TRUE object backed disk, FALSE otherwise. n_obs Number observations. obs One-dimensional annotation observations (data.frame). obs_names Names observations. obsm Multi-dimensional annotation observations (matrix). Stores key two higher-dimensional matrix n_obs rows. obsp Pairwise annotation observations, mutable mapping array-like values. Stores key two higher-dimensional matrix whose first two dimensions length n_obs. n_vars Number variables. var One-dimensional annotation variables (data.frame). var_names Names variables. varm Multi-dimensional annotation variables (matrix). Stores key two higher-dimensional matrix n_vars rows. varp Pairwise annotation variables, mutable mapping array-like values. Stores key two higher-dimensional matrix whose first two dimensions length n_vars. shape Shape data matrix (n_obs, n_vars). uns Unstructured annotation (ordered dictionary). raw Store raw version X var $raw$X $raw$var. raw attribute initialized current content object setting:   content can deleted:   Upon slicing AnnData object along obs (row) axis, raw also sliced. Slicing AnnData object along vars (columns) axis leaves raw unaffected. Note can call:   retrieve data associated variable might filtered \"compressed away\" inX`.","code":"adata$layers <- list(spliced = spliced, unspliced = unspliced) adata$layers[\"unspliced\"] adata$layers[\"spliced\"] = example_matrix a <- adata$layers[\"spliced\"][, 10] adata$layers[\"spliced\"] <- NULL names(adata$layers) adata$raw = adata adata$raw <- NULL adata$raw[, 'orig_variable_name']$X"},{"path":[]},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Create an Annotated Data Matrix — AnnData","text":"AnnDataR6$new() AnnDataR6$obs_keys() AnnDataR6$obs_names_make_unique() AnnDataR6$obsm_keys() AnnDataR6$var_keys() AnnDataR6$var_names_make_unique() AnnDataR6$varm_keys() AnnDataR6$uns_keys() AnnDataR6$chunk_X() AnnDataR6$chunked_X() AnnDataR6$concatenate() AnnDataR6$copy() AnnDataR6$rename_categories() AnnDataR6$strings_to_categoricals() AnnDataR6$to_df() AnnDataR6$transpose() AnnDataR6$write_csvs() AnnDataR6$write_h5ad() AnnDataR6$write_loom() AnnDataR6$write_zarr() AnnDataR6$print() AnnDataR6$.set_py_object() AnnDataR6$.get_py_object()","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Create an Annotated Data Matrix — AnnData","text":"Create new AnnData object","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$new(obj)"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Annotated Data Matrix — AnnData","text":"obj Python anndata object","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"\\dontrun{ # use AnnData() instead of AnnDataR6$new() ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")) ) }"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-obs-keys-","dir":"Reference","previous_headings":"","what":"Method obs_keys()","title":"Create an Annotated Data Matrix — AnnData","text":"List keys observation annotation obs.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$obs_keys()"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")) ) ad$obs_keys() }"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-obs-names-make-unique-","dir":"Reference","previous_headings":"","what":"Method obs_names_make_unique()","title":"Create an Annotated Data Matrix — AnnData","text":"Makes index unique appending number string duplicate index element: 1, 2, etc. tentative name created algorithm already exists index, tries next integer sequence. first occurrence non-unique value ignored.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$obs_names_make_unique(join = \"-\")"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Annotated Data Matrix — AnnData","text":"join connecting string name integer (default: \"-\").","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(rep(1, 6), nrow = 3),   obs = data.frame(field = c(1, 2, 3)) ) ad$obs_names <- c(\"a\", \"a\", \"b\") ad$obs_names_make_unique() ad$obs_names }"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-obsm-keys-","dir":"Reference","previous_headings":"","what":"Method obsm_keys()","title":"Create an Annotated Data Matrix — AnnData","text":"List keys observation annotation obsm.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$obsm_keys()"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"examples-3","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   obsm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ) ) ad$obs_keys() }"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-var-keys-","dir":"Reference","previous_headings":"","what":"Method var_keys()","title":"Create an Annotated Data Matrix — AnnData","text":"List keys variable annotation var.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$var_keys()"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"examples-4","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")) ) ad$var_keys() }"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-var-names-make-unique-","dir":"Reference","previous_headings":"","what":"Method var_names_make_unique()","title":"Create an Annotated Data Matrix — AnnData","text":"Makes index unique appending number string duplicate index element: 1, 2, etc. tentative name created algorithm already exists index, tries next integer sequence. first occurrence non-unique value ignored.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$var_names_make_unique(join = \"-\")"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Annotated Data Matrix — AnnData","text":"join connecting string name integer (default: \"-\").","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"examples-5","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(rep(1, 6), nrow = 2),   var = data.frame(field = c(1, 2, 3)) ) ad$var_names <- c(\"a\", \"a\", \"b\") ad$var_names_make_unique() ad$var_names }"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-varm-keys-","dir":"Reference","previous_headings":"","what":"Method varm_keys()","title":"Create an Annotated Data Matrix — AnnData","text":"List keys variable annotation varm.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$varm_keys()"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"examples-6","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   varm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ) ) ad$varm_keys() }"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-uns-keys-","dir":"Reference","previous_headings":"","what":"Method uns_keys()","title":"Create an Annotated Data Matrix — AnnData","text":"List keys unstructured annotation uns.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$uns_keys()"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"examples-7","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) ) }"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-chunk-x-","dir":"Reference","previous_headings":"","what":"Method chunk_X()","title":"Create an Annotated Data Matrix — AnnData","text":"Return chunk data matrix X random specified indices.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$chunk_X(select = 1000L, replace = TRUE)"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Annotated Data Matrix — AnnData","text":"select Depending values: 1 integer: random chunk select rows returned. multiple integers: chunk indices returned. replace select integer TRUE means random sampling indices replacement, FALSE without replacement.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"examples-8","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(runif(10000), nrow = 50) )  ad$chunk_X(select = 10L) # 10 random samples ad$chunk_X(select = 1:3) # first 3 samples }"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-chunked-x-","dir":"Reference","previous_headings":"","what":"Method chunked_X()","title":"Create an Annotated Data Matrix — AnnData","text":"Return iterator rows data matrix X.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$chunked_X(chunk_size = NULL)"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Annotated Data Matrix — AnnData","text":"chunk_size Row size single chunk.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"examples-9","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(runif(10000), nrow = 50) ) ad$chunked_X(10) }"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-concatenate-","dir":"Reference","previous_headings":"","what":"Method concatenate()","title":"Create an Annotated Data Matrix — AnnData","text":"Use concat() instead.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$concatenate(...)"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Annotated Data Matrix — AnnData","text":"... Deprecated","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-copy-","dir":"Reference","previous_headings":"","what":"Method copy()","title":"Create an Annotated Data Matrix — AnnData","text":"Full copy, optionally disk.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$copy(filename = NULL)"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Annotated Data Matrix — AnnData","text":"filename Path filename (default: NULL).","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"examples-10","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2) ) ad$copy() ad$copy(\"file.h5ad\") }"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-rename-categories-","dir":"Reference","previous_headings":"","what":"Method rename_categories()","title":"Create an Annotated Data Matrix — AnnData","text":"Rename categories annotation key obs, var, uns. supports passing list/array-like categories argument. Besides calling self.obs[key].cat.categories = categories – similar var - also renames categories unstructured annotation uses categorical annotation key.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$rename_categories(key, categories)"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Annotated Data Matrix — AnnData","text":"key Key observations variables annotation. categories New categories, number old categories.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"examples-11","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")) ) ad$rename_categories(\"group\", c(a = \"A\", b = \"B\")) # ?? }"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-strings-to-categoricals-","dir":"Reference","previous_headings":"","what":"Method strings_to_categoricals()","title":"Create an Annotated Data Matrix — AnnData","text":"Transform string annotations categoricals. affects string annotations lead less categories total number observations.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$strings_to_categoricals(df = NULL)"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Annotated Data Matrix — AnnData","text":"df df NULL, modifies obs var, otherwise modifies df inplace.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"examples-12","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")), ) ad$strings_to_categoricals() # ?? }"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-to-df-","dir":"Reference","previous_headings":"","what":"Method to_df()","title":"Create an Annotated Data Matrix — AnnData","text":"Generate shallow data frame. data matrix X returned data frame, obs_names rownames, var_names columns names. annotations maintained returned object. data matrix densified case sparse.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$to_df(layer = NULL)"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Annotated Data Matrix — AnnData","text":"layer Key layers","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"examples-13","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   layers = list(     spliced = matrix(c(4, 5, 6, 7), nrow = 2),     unspliced = matrix(c(8, 9, 10, 11), nrow = 2)   ) )  ad$to_df() ad$to_df(\"unspliced\") }"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-transpose-","dir":"Reference","previous_headings":"","what":"Method transpose()","title":"Create an Annotated Data Matrix — AnnData","text":"transpose Transpose whole object. Data matrix transposed, observations variables interchanged. Ignores .raw.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$transpose()"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"examples-14","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")) )  ad$transpose() }"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-write-csvs-","dir":"Reference","previous_headings":"","what":"Method write_csvs()","title":"Create an Annotated Data Matrix — AnnData","text":"Write annotation .csv files. possible recover full AnnData files. Use write_h5ad() .","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$write_csvs(dirname, skip_data = TRUE, sep = \",\")"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Annotated Data Matrix — AnnData","text":"dirname Name directory export. skip_data Skip data matrix X. sep Separator data anndata AnnData() object","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"examples-15","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   varm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) )  ad$to_write_csvs(\"output\")  unlink(\"output\", recursive = TRUE) }"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-write-h-ad-","dir":"Reference","previous_headings":"","what":"Method write_h5ad()","title":"Create an Annotated Data Matrix — AnnData","text":"Write .h5ad-formatted hdf5 file. Generally, sparse data stored dense matrix, can dramatically improve performance reduce disk space converting csr_matrix:","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$write_h5ad(   filename,   compression = NULL,   compression_opts = NULL,   as_dense = list() )"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Annotated Data Matrix — AnnData","text":"filename Filename data file. Defaults backing file. compression See h5py filter pipeline. Options \"gzip\", \"lzf\" NULL. compression_opts See h5py filter pipeline. as_dense Sparse AnnData object write dense. Currently supports \"X\" \"raw/X\".","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"examples-16","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   varm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) )  ad$write_h5ad(\"output.h5ad\")  file.remove(\"output.h5ad\") }"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-write-loom-","dir":"Reference","previous_headings":"","what":"Method write_loom()","title":"Create an Annotated Data Matrix — AnnData","text":"Write .loom-formatted hdf5 file.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-18","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$write_loom(filename, write_obsm_varm = FALSE)"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Annotated Data Matrix — AnnData","text":"filename filename. write_obsm_varm Whether also write varm obsm.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"examples-17","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   varm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) )  ad$write_loom(\"output.loom\")  file.remove(\"output.loom\") }"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-write-zarr-","dir":"Reference","previous_headings":"","what":"Method write_zarr()","title":"Create an Annotated Data Matrix — AnnData","text":"Write hierarchical Zarr array store.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-19","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$write_zarr(store, chunks = NULL)"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Annotated Data Matrix — AnnData","text":"store filename, MutableMapping, Zarr storage class. chunks Chunk size.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Create an Annotated Data Matrix — AnnData","text":"Print AnnData object","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-20","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$print(...)"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"arguments-15","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Annotated Data Matrix — AnnData","text":"... optional arguments print method.","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"examples-18","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   layers = list(     spliced = matrix(c(4, 5, 6, 7), nrow = 2),     unspliced = matrix(c(8, 9, 10, 11), nrow = 2)   ),   obsm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   varm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) )  ad$print() print(ad) }"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-set-py-object-","dir":"Reference","previous_headings":"","what":"Method .set_py_object()","title":"Create an Annotated Data Matrix — AnnData","text":"Set internal Python object","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-21","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$.set_py_object(obj)"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"arguments-16","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create an Annotated Data Matrix — AnnData","text":"obj python anndata object","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"method-get-py-object-","dir":"Reference","previous_headings":"","what":"Method .get_py_object()","title":"Create an Annotated Data Matrix — AnnData","text":"Get internal Python object","code":""},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"usage-22","dir":"Reference","previous_headings":"","what":"Usage","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"AnnDataR6$.get_py_object()"},{"path":"https://anndata.dynverse.org/reference/AnnData.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create an Annotated Data Matrix — AnnData","text":"","code":"if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   layers = list(     spliced = matrix(c(4, 5, 6, 7), nrow = 2),     unspliced = matrix(c(8, 9, 10, 11), nrow = 2)   ),   obsm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   varm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) )  value <- matrix(c(1, 2, 3, 4), nrow = 2) ad$X <- value ad$X  ad$layers ad$layers[\"spliced\"] ad$layers[\"test\"] <- value ad$layers  ad$to_df() ad$uns  as.matrix(ad) as.matrix(ad, layer = \"unspliced\") dim(ad) rownames(ad) colnames(ad) } # }  ## ------------------------------------------------ ## Method `AnnDataR6$new` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ # use AnnData() instead of AnnDataR6$new() ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")) ) } # }  ## ------------------------------------------------ ## Method `AnnDataR6$obs_keys` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")) ) ad$obs_keys() } # }  ## ------------------------------------------------ ## Method `AnnDataR6$obs_names_make_unique` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(rep(1, 6), nrow = 3),   obs = data.frame(field = c(1, 2, 3)) ) ad$obs_names <- c(\"a\", \"a\", \"b\") ad$obs_names_make_unique() ad$obs_names } # }  ## ------------------------------------------------ ## Method `AnnDataR6$obsm_keys` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   obsm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ) ) ad$obs_keys() } # }  ## ------------------------------------------------ ## Method `AnnDataR6$var_keys` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")) ) ad$var_keys() } # }  ## ------------------------------------------------ ## Method `AnnDataR6$var_names_make_unique` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(rep(1, 6), nrow = 2),   var = data.frame(field = c(1, 2, 3)) ) ad$var_names <- c(\"a\", \"a\", \"b\") ad$var_names_make_unique() ad$var_names } # }  ## ------------------------------------------------ ## Method `AnnDataR6$varm_keys` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   varm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ) ) ad$varm_keys() } # }  ## ------------------------------------------------ ## Method `AnnDataR6$uns_keys` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) ) } # }  ## ------------------------------------------------ ## Method `AnnDataR6$chunk_X` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(runif(10000), nrow = 50) )  ad$chunk_X(select = 10L) # 10 random samples ad$chunk_X(select = 1:3) # first 3 samples } # }  ## ------------------------------------------------ ## Method `AnnDataR6$chunked_X` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(runif(10000), nrow = 50) ) ad$chunked_X(10) } # }  ## ------------------------------------------------ ## Method `AnnDataR6$copy` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2) ) ad$copy() ad$copy(\"file.h5ad\") } # }  ## ------------------------------------------------ ## Method `AnnDataR6$rename_categories` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")) ) ad$rename_categories(\"group\", c(a = \"A\", b = \"B\")) # ?? } # }  ## ------------------------------------------------ ## Method `AnnDataR6$strings_to_categoricals` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")), ) ad$strings_to_categoricals() # ?? } # }  ## ------------------------------------------------ ## Method `AnnDataR6$to_df` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   layers = list(     spliced = matrix(c(4, 5, 6, 7), nrow = 2),     unspliced = matrix(c(8, 9, 10, 11), nrow = 2)   ) )  ad$to_df() ad$to_df(\"unspliced\") } # }  ## ------------------------------------------------ ## Method `AnnDataR6$transpose` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")) )  ad$transpose() } # }  ## ------------------------------------------------ ## Method `AnnDataR6$write_csvs` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   varm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) )  ad$to_write_csvs(\"output\")  unlink(\"output\", recursive = TRUE) } # }  ## ------------------------------------------------ ## Method `AnnDataR6$write_h5ad` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   varm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) )  ad$write_h5ad(\"output.h5ad\")  file.remove(\"output.h5ad\") } # }  ## ------------------------------------------------ ## Method `AnnDataR6$write_loom` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   varm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) )  ad$write_loom(\"output.loom\")  file.remove(\"output.loom\") } # }  ## ------------------------------------------------ ## Method `AnnDataR6$print` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   layers = list(     spliced = matrix(c(4, 5, 6, 7), nrow = 2),     unspliced = matrix(c(8, 9, 10, 11), nrow = 2)   ),   obsm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   varm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) )  ad$print() print(ad) } # }"},{"path":"https://anndata.dynverse.org/reference/AnnDataHelpers.html","id":null,"dir":"Reference","previous_headings":"","what":"AnnData Helpers — dimnames.AnnDataR6","title":"AnnData Helpers — dimnames.AnnDataR6","text":"AnnData Helpers","code":""},{"path":"https://anndata.dynverse.org/reference/AnnDataHelpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"AnnData Helpers — dimnames.AnnDataR6","text":"","code":"# S3 method for class 'AnnDataR6' dimnames(x)  # S3 method for class 'AnnDataR6' dimnames(x) <- value  # S3 method for class 'AnnDataR6' dim(x)  # S3 method for class 'AnnDataR6' as.data.frame(x, row.names = NULL, optional = FALSE, layer = NULL, ...)  # S3 method for class 'AnnDataR6' as.matrix(x, layer = NULL, ...)  # S3 method for class 'AnnDataR6' r_to_py(x, convert = FALSE)  # S3 method for class 'anndata._core.anndata.AnnData' py_to_r(x)  # S3 method for class 'AnnDataR6' x[oidx, vidx]  # S3 method for class 'AnnDataR6' t(x)  # S3 method for class 'anndata._core.sparse_dataset.SparseDataset' py_to_r(x)  # S3 method for class 'h5py._hl.dataset.Dataset' py_to_r(x)"},{"path":"https://anndata.dynverse.org/reference/AnnDataHelpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"AnnData Helpers — dimnames.AnnDataR6","text":"x AnnData object. value possible valie dimnames(ad). dimnames AnnData can NULL (stored) list length dim(ad). list, components either NULL character vector positive length appropriate dimension ad. row.names used. optional used. layer AnnData layer. NULL, use ad$X, otherwise ad$layers[layer]. ... Parameters passed underlying function. convert used. oidx Observation indices vidx Variable indices","code":""},{"path":"https://anndata.dynverse.org/reference/AnnDataHelpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"AnnData Helpers — dimnames.AnnDataR6","text":"","code":"if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3, 4, 5), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L, 3L), row.names = c(\"var1\", \"var2\", \"var3\")),   layers = list(     spliced = matrix(c(4, 5, 6, 7, 8, 9), nrow = 2),     unspliced = matrix(c(8, 9, 10, 11, 12, 13), nrow = 2)   ),   obsm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   varm = list(     ones = matrix(rep(1L, 12), nrow = 3),     rand = matrix(rnorm(6), nrow = 3),     zeros = matrix(rep(0L, 12), nrow = 3)   ),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) )  dimnames(ad) dim(ad) as.data.frame(ad) as.data.frame(ad, layer = \"unspliced\") as.matrix(ad) as.matrix(ad, layer = \"unspliced\") ad[2, , drop = FALSE] ad[, -1] ad[, c(\"var1\", \"var2\")] } # }"},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Layers object — Layers","title":"Create a Layers object — Layers","text":"Create Layers object","code":""},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Layers object — Layers","text":"","code":"Layers(parent, vals = NULL)"},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Layers object — Layers","text":"parent AnnData object. vals named list matrices dimensions parent.","code":""},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Create a Layers object — Layers","text":"parent Reference parent AnnData view","code":""},{"path":[]},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Create a Layers object — Layers","text":"LayersR6$new() LayersR6$print() LayersR6$get() LayersR6$set() LayersR6$del() LayersR6$keys() LayersR6$length() LayersR6$.set_py_object() LayersR6$.get_py_object()","code":""},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Create a Layers object — Layers","text":"Create new Layers object","code":""},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Layers object — Layers","text":"","code":"LayersR6$new(obj)"},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Layers object — Layers","text":"obj Python Layers object","code":""},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Create a Layers object — Layers","text":"Print Layers object","code":""},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Layers object — Layers","text":"","code":"LayersR6$print(...)"},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Layers object — Layers","text":"... optional arguments print method.","code":""},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Layers object — Layers","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   layers = list(     spliced = matrix(c(4, 5, 6, 7), nrow = 2),     unspliced = matrix(c(8, 9, 10, 11), nrow = 2)   ) )  print(ad$layers) }"},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"method-get-","dir":"Reference","previous_headings":"","what":"Method get()","title":"Create a Layers object — Layers","text":"Get layer","code":""},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Layers object — Layers","text":"","code":"LayersR6$get(name)"},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Layers object — Layers","text":"name Name layer","code":""},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"method-set-","dir":"Reference","previous_headings":"","what":"Method set()","title":"Create a Layers object — Layers","text":"Set layer","code":""},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Layers object — Layers","text":"","code":"LayersR6$set(name, value)"},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Layers object — Layers","text":"name Name layer value matrix","code":""},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"method-del-","dir":"Reference","previous_headings":"","what":"Method del()","title":"Create a Layers object — Layers","text":"Delete layer","code":""},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Layers object — Layers","text":"","code":"LayersR6$del(name)"},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Layers object — Layers","text":"name Name layer","code":""},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"method-keys-","dir":"Reference","previous_headings":"","what":"Method keys()","title":"Create a Layers object — Layers","text":"Get names layers","code":""},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Layers object — Layers","text":"","code":"LayersR6$keys()"},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"method-length-","dir":"Reference","previous_headings":"","what":"Method length()","title":"Create a Layers object — Layers","text":"Get number layers","code":""},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Layers object — Layers","text":"","code":"LayersR6$length()"},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"method-set-py-object-","dir":"Reference","previous_headings":"","what":"Method .set_py_object()","title":"Create a Layers object — Layers","text":"Set internal Python object","code":""},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Layers object — Layers","text":"","code":"LayersR6$.set_py_object(obj)"},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Layers object — Layers","text":"obj Python layers object","code":""},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"method-get-py-object-","dir":"Reference","previous_headings":"","what":"Method .get_py_object()","title":"Create a Layers object — Layers","text":"Get internal Python object","code":""},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Layers object — Layers","text":"","code":"LayersR6$.get_py_object()"},{"path":"https://anndata.dynverse.org/reference/Layers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Layers object — Layers","text":"","code":"if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   layers = list(     spliced = matrix(c(4, 5, 6, 7), nrow = 2),     unspliced = matrix(c(8, 9, 10, 11), nrow = 2)   ) ) ad$layers[\"spliced\"] ad$layers[\"test\"] <- matrix(c(1, 3, 5, 7), nrow = 2)  length(ad$layers) names(ad$layers) } # }  ## ------------------------------------------------ ## Method `LayersR6$print` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   layers = list(     spliced = matrix(c(4, 5, 6, 7), nrow = 2),     unspliced = matrix(c(8, 9, 10, 11), nrow = 2)   ) )  print(ad$layers) } # }"},{"path":"https://anndata.dynverse.org/reference/LayersHelpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Layers Helpers — names.LayersR6","title":"Layers Helpers — names.LayersR6","text":"Layers Helpers","code":""},{"path":"https://anndata.dynverse.org/reference/LayersHelpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Layers Helpers — names.LayersR6","text":"","code":"# S3 method for class 'LayersR6' names(x)  # S3 method for class 'LayersR6' length(x)  # S3 method for class 'LayersR6' r_to_py(x, convert = FALSE)  # S3 method for class 'anndata._core.aligned_mapping.LayersBase' py_to_r(x)  # S3 method for class 'LayersR6' x[name]  # S3 method for class 'LayersR6' x[name] <- value  # S3 method for class 'LayersR6' x[[name]]  # S3 method for class 'LayersR6' x[[name]] <- value"},{"path":"https://anndata.dynverse.org/reference/LayersHelpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Layers Helpers — names.LayersR6","text":"x AnnData object. convert used. name Name layer. value Replacement value.","code":""},{"path":"https://anndata.dynverse.org/reference/LayersHelpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Layers Helpers — names.LayersR6","text":"","code":"if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3, 4, 5), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L, 3L), row.names = c(\"var1\", \"var2\", \"var3\")),   layers = list(     spliced = matrix(c(4, 5, 6, 7, 8, 9), nrow = 2),     unspliced = matrix(c(8, 9, 10, 11, 12, 13), nrow = 2)   ) )  ad$layers[\"spliced\"] ad$layers[\"test\"] <- matrix(c(1, 3, 5, 7), nrow = 2)  length(ad$layers) names(ad$layers) } # }"},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Raw object — Raw","title":"Create a Raw object — Raw","text":"Create Raw object","code":""},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Raw object — Raw","text":"","code":"Raw(adata, X = NULL, var = NULL, varm = NULL)"},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Raw object — Raw","text":"adata AnnData object. X #observations × #variables data matrix. var Key-indexed one-dimensional variables annotation length #variables. varm Key-indexed multi-dimensional variables annotation length #variables.","code":""},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Create a Raw object — Raw","text":"X Data matrix shape n_obs × n_vars. n_obs Number observations. obs_names Names observations. n_vars Number variables. var One-dimensional annotation variables (data.frame). var_names Names variables. varm Multi-dimensional annotation variables (matrix). Stores key two higher-dimensional matrix n_var rows. shape Shape data matrix (n_obs, n_vars).","code":""},{"path":[]},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Create a Raw object — Raw","text":"RawR6$new() RawR6$copy() RawR6$to_adata() RawR6$print() RawR6$.set_py_object() RawR6$.get_py_object()","code":""},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Create a Raw object — Raw","text":"Create new Raw object","code":""},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Raw object — Raw","text":"","code":"RawR6$new(obj)"},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Raw object — Raw","text":"obj Python Raw object","code":""},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"method-copy-","dir":"Reference","previous_headings":"","what":"Method copy()","title":"Create a Raw object — Raw","text":"Full copy, optionally disk.","code":""},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Raw object — Raw","text":"","code":"RawR6$copy()"},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Raw object — Raw","text":"filename Path filename (default: NULL).","code":""},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Raw object — Raw","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2) ) ad$copy() ad$copy(\"file.h5ad\") }"},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"method-to-adata-","dir":"Reference","previous_headings":"","what":"Method to_adata()","title":"Create a Raw object — Raw","text":"Create full AnnData object","code":""},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Raw object — Raw","text":"","code":"RawR6$to_adata()"},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"examples-1","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Raw object — Raw","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   layers = list(     spliced = matrix(c(4, 5, 6, 7), nrow = 2),     unspliced = matrix(c(8, 9, 10, 11), nrow = 2)   ) ) ad$raw <- ad  ad$raw$to_adata() }"},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Create a Raw object — Raw","text":"Print Raw object","code":""},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Raw object — Raw","text":"","code":"RawR6$print(...)"},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Raw object — Raw","text":"... optional arguments print method.","code":""},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"examples-2","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Raw object — Raw","text":"","code":"\\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   layers = list(     spliced = matrix(c(4, 5, 6, 7), nrow = 2),     unspliced = matrix(c(8, 9, 10, 11), nrow = 2)   ),   obsm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   varm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) ) ad$raw <- ad  library(reticulate) sc <- import(\"scanpy\") sc$pp$normalize_per_cell(ad)  ad[] ad$raw[]  ad$print() print(ad) }"},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"method-set-py-object-","dir":"Reference","previous_headings":"","what":"Method .set_py_object()","title":"Create a Raw object — Raw","text":"Set internal Python object","code":""},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Raw object — Raw","text":"","code":"RawR6$.set_py_object(obj)"},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Raw object — Raw","text":"obj Python Raw object","code":""},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"method-get-py-object-","dir":"Reference","previous_headings":"","what":"Method .get_py_object()","title":"Create a Raw object — Raw","text":"Get internal Python object","code":""},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Raw object — Raw","text":"","code":"RawR6$.get_py_object()"},{"path":"https://anndata.dynverse.org/reference/Raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Raw object — Raw","text":"","code":"if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   layers = list(     spliced = matrix(c(4, 5, 6, 7), nrow = 2),     unspliced = matrix(c(8, 9, 10, 11), nrow = 2)   ),   obsm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   varm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) ) ad$raw <- ad  library(reticulate) sc <- import(\"scanpy\") sc$pp$normalize_per_cell(ad)  ad[] ad$raw[] } # }  ## ------------------------------------------------ ## Method `RawR6$copy` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2) ) ad$copy() ad$copy(\"file.h5ad\") } # }  ## ------------------------------------------------ ## Method `RawR6$to_adata` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   layers = list(     spliced = matrix(c(4, 5, 6, 7), nrow = 2),     unspliced = matrix(c(8, 9, 10, 11), nrow = 2)   ) ) ad$raw <- ad  ad$raw$to_adata() } # }  ## ------------------------------------------------ ## Method `RawR6$print` ## ------------------------------------------------  if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   layers = list(     spliced = matrix(c(4, 5, 6, 7), nrow = 2),     unspliced = matrix(c(8, 9, 10, 11), nrow = 2)   ),   obsm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   varm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) ) ad$raw <- ad  library(reticulate) sc <- import(\"scanpy\") sc$pp$normalize_per_cell(ad)  ad[] ad$raw[]  ad$print() print(ad) } # }"},{"path":"https://anndata.dynverse.org/reference/RawHelpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Raw Helpers — dimnames.RawR6","title":"Raw Helpers — dimnames.RawR6","text":"Raw Helpers","code":""},{"path":"https://anndata.dynverse.org/reference/RawHelpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Raw Helpers — dimnames.RawR6","text":"","code":"# S3 method for class 'RawR6' dimnames(x)  # S3 method for class 'RawR6' dim(x)  # S3 method for class 'RawR6' as.matrix(x, ...)  # S3 method for class 'RawR6' r_to_py(x, convert = FALSE)  # S3 method for class 'anndata._core.raw.Raw' py_to_r(x)  # S3 method for class 'RawR6' x[...]"},{"path":"https://anndata.dynverse.org/reference/RawHelpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Raw Helpers — dimnames.RawR6","text":"x AnnData object. ... Parameters passed underlying function. convert used.","code":""},{"path":"https://anndata.dynverse.org/reference/RawHelpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Raw Helpers — dimnames.RawR6","text":"","code":"if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3, 4, 5), nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L, 3L), row.names = c(\"var1\", \"var2\", \"var3\")),   layers = list(     spliced = matrix(c(4, 5, 6, 7, 8, 9), nrow = 2),     unspliced = matrix(c(8, 9, 10, 11, 12, 13), nrow = 2)   ),   obsm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   varm = list(     ones = matrix(rep(1L, 12), nrow = 3),     rand = matrix(rnorm(6), nrow = 3),     zeros = matrix(rep(0L, 12), nrow = 3)   ),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) ) ad$raw <- ad  dimnames(ad$raw) dim(ad$raw) as.matrix(ad$raw) ad$raw[2, , drop = FALSE] ad$raw[, -1] ad$raw[, c(\"var1\", \"var2\")] } # }"},{"path":"https://anndata.dynverse.org/reference/all.equal.html","id":null,"dir":"Reference","previous_headings":"","what":"Test if two objects objects are equal — all.equal.AnnDataR6","title":"Test if two objects objects are equal — all.equal.AnnDataR6","text":"Test two objects objects equal","code":""},{"path":"https://anndata.dynverse.org/reference/all.equal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test if two objects objects are equal — all.equal.AnnDataR6","text":"","code":"# S3 method for class 'AnnDataR6' all.equal(target, current, ...)  # S3 method for class 'LayersR6' all.equal(target, current, ...)  # S3 method for class 'RawR6' all.equal(target, current, ...)"},{"path":"https://anndata.dynverse.org/reference/all.equal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test if two objects objects are equal — all.equal.AnnDataR6","text":"target R object. current R object, compared target. ... arguments different methods, notably     following two, numerical comparison:","code":""},{"path":"https://anndata.dynverse.org/reference/anndata-package.html","id":null,"dir":"Reference","previous_headings":"","what":"anndata - Annotated Data — anndata-package","title":"anndata - Annotated Data — anndata-package","text":"anndata provides scalable way keeping track data learned annotations, can used read write h5ad file format. AnnData() stores data matrix X together annotations observations obs (obsm, obsp), variables var (varm, varp), unstructured annotations uns.","code":""},{"path":"https://anndata.dynverse.org/reference/anndata-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"anndata - Annotated Data — anndata-package","text":"package , essense, R wrapper similarly named Python package anndata, added functionality support R-like syntax. version number anndata R package synced version number python version. Check ?anndata full list functions provided package.","code":""},{"path":"https://anndata.dynverse.org/reference/anndata-package.html","id":"creating-an-anndata-object","dir":"Reference","previous_headings":"","what":"Creating an AnnData object","title":"anndata - Annotated Data — anndata-package","text":"AnnData()","code":""},{"path":"https://anndata.dynverse.org/reference/anndata-package.html","id":"concatenating-two-or-more-anndata-objects","dir":"Reference","previous_headings":"","what":"Concatenating two or more AnnData objects","title":"anndata - Annotated Data — anndata-package","text":"concat()","code":""},{"path":"https://anndata.dynverse.org/reference/anndata-package.html","id":"reading-an-anndata-object-from-a-file","dir":"Reference","previous_headings":"","what":"Reading an AnnData object from a file","title":"anndata - Annotated Data — anndata-package","text":"read_csv() read_excel() read_h5ad() read_hdf() read_loom() read_mtx() read_text() read_umi_tools()","code":""},{"path":"https://anndata.dynverse.org/reference/anndata-package.html","id":"writing-an-anndata-object-to-a-file","dir":"Reference","previous_headings":"","what":"Writing an AnnData object to a file","title":"anndata - Annotated Data — anndata-package","text":"write_csvs() write_h5ad() write_loom()","code":""},{"path":"https://anndata.dynverse.org/reference/anndata-package.html","id":"install-the-anndata-python-package","dir":"Reference","previous_headings":"","what":"Install the anndata Python package","title":"anndata - Annotated Data — anndata-package","text":"install_anndata()","code":""},{"path":[]},{"path":"https://anndata.dynverse.org/reference/anndata-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"anndata - Annotated Data — anndata-package","text":"Maintainer: Robrecht Cannoodt rcannood@gmail.com (ORCID) [copyright holder] contributors: Philipp Angerer phil.angerer@gmail.com (ORCID) [conceptor] Alex Wolf f.alex.wolf@gmx.de (ORCID) [conceptor] Isaac Virshup (ORCID) [conceptor] Sergei Rybakov (ORCID) [conceptor]","code":""},{"path":"https://anndata.dynverse.org/reference/anndata-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"anndata - Annotated Data — anndata-package","text":"","code":"if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(1:6, nrow = 2),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L, 3L), row.names = c(\"var1\", \"var2\", \"var3\")),   layers = list(     spliced = matrix(4:9, nrow = 2),     unspliced = matrix(8:13, nrow = 2)   ),   obsm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   varm = list(     ones = matrix(rep(1L, 12), nrow = 3),     rand = matrix(rnorm(6), nrow = 3),     zeros = matrix(rep(0L, 12), nrow = 3)   ),   uns = list(     a = 1,     b = data.frame(i = 1:3, j = 4:6, value = runif(3)),     c = list(c.a = 3, c.b = 4)   ) )  ad$X  ad$obs ad$var  ad$obsm[\"ones\"] ad$varm[\"rand\"]  ad$layers[\"unspliced\"] ad$layers[\"spliced\"]  ad$uns[\"b\"]  ad[, c(\"var1\", \"var2\")] ad[-1, , drop = FALSE] ad[, 2] <- 10 } # }"},{"path":"https://anndata.dynverse.org/reference/concat.html","id":null,"dir":"Reference","previous_headings":"","what":"concat — concat","title":"concat — concat","text":"Concatenates AnnData objects along axis.","code":""},{"path":"https://anndata.dynverse.org/reference/concat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"concat — concat","text":"","code":"concat(   adatas,   axis = 0L,   join = \"inner\",   merge = NULL,   uns_merge = NULL,   label = NULL,   keys = NULL,   index_unique = NULL,   fill_value = NULL,   pairwise = FALSE )"},{"path":"https://anndata.dynverse.org/reference/concat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"concat — concat","text":"adatas objects concatenated. Mapping passed, keys used keys argument values concatenated. axis axis concatenate along. join align values concatenating. \"outer\", union axis taken. \"inner\", intersection. See concatenation . merge elements aligned axis concatenated along selected. Currently implemented strategies include: * NULL: elements kept. * \"\": Elements objects. * \"unique\": Elements one possible value. * \"first\": first element seen position. * \"\": Elements show one objects. uns_merge elements .uns selected. Uses set strategies merge argument, except applied recursively. label Column axis annotation (.e. .obs .var) place batch information . NULL, column added. keys Names object added. values used column values label appended index index_unique NULL. Defaults incrementing integer labels. index_unique Whether make index unique using keys. provided, delimeter orig_idx + index_unique + key. NULL, original indices kept. fill_value join=\"outer\", value used fill introduced indices. default, sparse arrays padded zeros, dense arrays DataFrames padded missing values. pairwise Whether pairwise elements along concatenated dimension included. FALSE default, since resulting arrays often meaningful.","code":""},{"path":"https://anndata.dynverse.org/reference/concat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"concat — concat","text":"See concatenation section docs -depth description. warning: function marked experimental 0.7 release series, supercede AnnData$concatenate() method future releases. warning: use join='outer' fills 0s sparse data variables absent batch. Use care. Dense data filled NaN.","code":""},{"path":"https://anndata.dynverse.org/reference/concat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"concat — concat","text":"","code":"if (FALSE) { # \\dontrun{ # Preparing example objects a <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2, byrow = TRUE),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   varm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   uns = list(     a = 1,     b = 2,     c = list(       c.a = 3,       c.b = 4     )   ) )  b <- AnnData(   X = matrix(c(4, 5, 6, 7, 8, 9), nrow = 2, byrow = TRUE),   obs = data.frame(group = c(\"b\", \"c\"), row.names = c(\"s3\", \"s4\")),   var = data.frame(type = c(1L, 2L, 3L), row.names = c(\"var1\", \"var2\", \"var3\")),   varm = list(     ones = matrix(rep(1L, 15), nrow = 3),     rand = matrix(rnorm(15), nrow = 3)   ),   uns = list(     a = 1,     b = 3,     c = list(       c.a = 3     )   ) )  c <- AnnData(   X = matrix(c(10, 11, 12, 13), nrow = 2, byrow = TRUE),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(3L, 4L), row.names = c(\"var3\", \"var4\")),   uns = list(     a = 1,     b = 4,     c = list(       c.a = 3,       c.b = 4,       c.c = 5     )   ) )  # Concatenating along different axes concat(list(a, b))$to_df() concat(list(a, c), axis = 1L)$to_df()  # Inner and outer joins inner <- concat(list(a, b)) inner inner$obs_names inner$var_names  outer <- concat(list(a, b), join = \"outer\") outer outer$var_names outer$to_df()  # Keeping track of source objects concat(list(a = a, b = b), label = \"batch\")$obs concat(list(a, b), label = \"batch\", keys = c(\"a\", \"b\"))$obs concat(list(a = a, b = b), index_unique = \"-\")$obs  # Combining values not aligned to axis of concatenation concat(list(a, b), merge = \"same\") concat(list(a, b), merge = \"unique\") concat(list(a, b), merge = \"first\") concat(list(a, b), merge = \"only\")  # The same merge strategies can be used for elements in .uns concat(list(a, b, c), uns_merge = \"same\")$uns concat(list(a, b, c), uns_merge = \"unique\")$uns concat(list(a, b, c), uns_merge = \"first\")$uns concat(list(a, b, c), uns_merge = \"only\")$uns } # }"},{"path":"https://anndata.dynverse.org/reference/install_anndata.html","id":null,"dir":"Reference","previous_headings":"","what":"Install anndata — install_anndata","title":"Install anndata — install_anndata","text":"Needs run installing anndata R package.","code":""},{"path":"https://anndata.dynverse.org/reference/install_anndata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Install anndata — install_anndata","text":"","code":"install_anndata(method = \"auto\", conda = \"auto\")"},{"path":"https://anndata.dynverse.org/reference/install_anndata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Install anndata — install_anndata","text":"method Installation method. default, \"auto\" automatically finds method work local environment. Change default force specific installation method. Note \"virtualenv\" method available Windows. conda path conda executable. Use \"auto\" allow reticulate automatically find appropriate conda binary. See Finding Conda conda_binary() details.","code":""},{"path":"https://anndata.dynverse.org/reference/install_anndata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Install anndata — install_anndata","text":"","code":"if (FALSE) { # \\dontrun{ reticulate::conda_install() install_anndata() } # }"},{"path":"https://anndata.dynverse.org/reference/r-py-conversion.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between Python and R objects — r-py-conversion","title":"Convert between Python and R objects — r-py-conversion","text":"Convert Python R objects","code":""},{"path":"https://anndata.dynverse.org/reference/r-py-conversion.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between Python and R objects — r-py-conversion","text":"","code":"# S3 method for class 'collections.abc.MutableMapping' x[[name]] <- value  # S3 method for class 'collections.abc.Mapping' x[[name]]  # S3 method for class 'collections.abc.MutableMapping' x[name] <- value  # S3 method for class 'collections.abc.Mapping' x[name]  # S3 method for class 'collections.abc.Mapping' names(x)  # S3 method for class 'collections.abc.Set' py_to_r(x)  # S3 method for class 'pandas.core.indexes.base.Index' py_to_r(x)  # S3 method for class 'collections.abc.KeysView' py_to_r(x)  # S3 method for class 'collections.abc.Mapping' py_to_r(x)  # S3 method for class 'anndata.abc._AbstractCSDataset' py_to_r(x)"},{"path":"https://anndata.dynverse.org/reference/r-py-conversion.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between Python and R objects — r-py-conversion","text":"x Python object. name name value value","code":""},{"path":"https://anndata.dynverse.org/reference/r-py-conversion.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between Python and R objects — r-py-conversion","text":"R object, converted Python object.","code":""},{"path":"https://anndata.dynverse.org/reference/read_csv.html","id":null,"dir":"Reference","previous_headings":"","what":"read_csv — read_csv","title":"read_csv — read_csv","text":"Read .csv file.","code":""},{"path":"https://anndata.dynverse.org/reference/read_csv.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_csv — read_csv","text":"","code":"read_csv(   filename,   delimiter = \",\",   first_column_names = NULL,   dtype = \"float32\" )"},{"path":"https://anndata.dynverse.org/reference/read_csv.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_csv — read_csv","text":"filename Data file. delimiter Delimiter separates data within text file. NULL, split arbitrary number white spaces, different enforcing splitting single white space ' '. first_column_names Assume first column stores row names. dtype Numpy data type.","code":""},{"path":"https://anndata.dynverse.org/reference/read_csv.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"read_csv — read_csv","text":"read_text() default delimiter ','.","code":""},{"path":"https://anndata.dynverse.org/reference/read_csv.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read_csv — read_csv","text":"","code":"if (FALSE) { # \\dontrun{ ad <- read_csv(\"matrix.csv\") } # }"},{"path":"https://anndata.dynverse.org/reference/read_excel.html","id":null,"dir":"Reference","previous_headings":"","what":"read_excel — read_excel","title":"read_excel — read_excel","text":"Read .xlsx (Excel) file.","code":""},{"path":"https://anndata.dynverse.org/reference/read_excel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_excel — read_excel","text":"","code":"read_excel(filename, sheet, dtype = \"float32\")"},{"path":"https://anndata.dynverse.org/reference/read_excel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_excel — read_excel","text":"filename File name read . sheet Name sheet Excel file. dtype Numpy data type.","code":""},{"path":"https://anndata.dynverse.org/reference/read_excel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"read_excel — read_excel","text":"Assumes first columns stores row names first row column names.","code":""},{"path":"https://anndata.dynverse.org/reference/read_excel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read_excel — read_excel","text":"","code":"if (FALSE) { # \\dontrun{ ad <- read_excel(\"spreadsheet.xls\") } # }"},{"path":"https://anndata.dynverse.org/reference/read_h5ad.html","id":null,"dir":"Reference","previous_headings":"","what":"read_h5ad — read_h5ad","title":"read_h5ad — read_h5ad","text":"Read .h5ad-formatted hdf5 file.","code":""},{"path":"https://anndata.dynverse.org/reference/read_h5ad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_h5ad — read_h5ad","text":"","code":"read_h5ad(filename, backed = NULL)"},{"path":"https://anndata.dynverse.org/reference/read_h5ad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_h5ad — read_h5ad","text":"filename File name data file. backed 'r', load ~anndata.AnnData backed mode instead fully loading memory (memory mode). want modify backed attributes AnnData object, need choose 'r+'.","code":""},{"path":"https://anndata.dynverse.org/reference/read_h5ad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read_h5ad — read_h5ad","text":"","code":"if (FALSE) { # \\dontrun{ ad <- read_h5ad(\"example_formats/pbmc_1k_protein_v3_processed.h5ad\") } # }"},{"path":"https://anndata.dynverse.org/reference/read_hdf.html","id":null,"dir":"Reference","previous_headings":"","what":"read_hdf — read_hdf","title":"read_hdf — read_hdf","text":"Read .h5 (hdf5) file.","code":""},{"path":"https://anndata.dynverse.org/reference/read_hdf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_hdf — read_hdf","text":"","code":"read_hdf(filename, key)"},{"path":"https://anndata.dynverse.org/reference/read_hdf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_hdf — read_hdf","text":"filename Filename data file. key Name dataset file.","code":""},{"path":"https://anndata.dynverse.org/reference/read_hdf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"read_hdf — read_hdf","text":"Note: Also looks fields row_names col_names.","code":""},{"path":"https://anndata.dynverse.org/reference/read_hdf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read_hdf — read_hdf","text":"","code":"if (FALSE) { # \\dontrun{ ad <- read_hdf(\"file.h5\") } # }"},{"path":"https://anndata.dynverse.org/reference/read_loom.html","id":null,"dir":"Reference","previous_headings":"","what":"read_loom — read_loom","title":"read_loom — read_loom","text":"Read .loom-formatted hdf5 file.","code":""},{"path":"https://anndata.dynverse.org/reference/read_loom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_loom — read_loom","text":"","code":"read_loom(   filename,   sparse = TRUE,   cleanup = FALSE,   X_name = \"spliced\",   obs_names = \"CellID\",   obsm_names = NULL,   var_names = \"Gene\",   varm_names = NULL,   dtype = \"float32\",   ... )"},{"path":"https://anndata.dynverse.org/reference/read_loom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_loom — read_loom","text":"filename filename. sparse Whether read data matrix sparse. cleanup Whether collapse obs/var fields store one unique value .uns['loom-.']. X_name Loompy key data matrix AnnData.X initialized. obs_names Loompy key observation/cell names stored. obsm_names Loompy keys constructed observation matrices var_names Loompy key variable/gene names stored. varm_names Loompy keys constructed variable matrices dtype Numpy data type. ... Arguments loompy.connect","code":""},{"path":"https://anndata.dynverse.org/reference/read_loom.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"read_loom — read_loom","text":"reads whole file memory. Beware explicitly state want read file sparse data.","code":""},{"path":"https://anndata.dynverse.org/reference/read_loom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read_loom — read_loom","text":"","code":"if (FALSE) { # \\dontrun{ ad <- read_loom(\"dataset.loom\") } # }"},{"path":"https://anndata.dynverse.org/reference/read_mtx.html","id":null,"dir":"Reference","previous_headings":"","what":"read_mtx — read_mtx","title":"read_mtx — read_mtx","text":"Read .mtx file.","code":""},{"path":"https://anndata.dynverse.org/reference/read_mtx.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_mtx — read_mtx","text":"","code":"read_mtx(filename, dtype = \"float32\")"},{"path":"https://anndata.dynverse.org/reference/read_mtx.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_mtx — read_mtx","text":"filename filename. dtype Numpy data type.","code":""},{"path":"https://anndata.dynverse.org/reference/read_mtx.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read_mtx — read_mtx","text":"","code":"if (FALSE) { # \\dontrun{ ad <- read_mtx(\"matrix.mtx\") } # }"},{"path":"https://anndata.dynverse.org/reference/read_text.html","id":null,"dir":"Reference","previous_headings":"","what":"read_text — read_text","title":"read_text — read_text","text":"Read .txt, .tab, .data (text) file.","code":""},{"path":"https://anndata.dynverse.org/reference/read_text.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_text — read_text","text":"","code":"read_text(   filename,   delimiter = NULL,   first_column_names = NULL,   dtype = \"float32\" )"},{"path":"https://anndata.dynverse.org/reference/read_text.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_text — read_text","text":"filename Data file, filename stream. delimiter Delimiter separates data within text file. NULL, split arbitrary number white spaces, different enforcing splitting single white space ' '. first_column_names Assume first column stores row names. dtype Numpy data type.","code":""},{"path":"https://anndata.dynverse.org/reference/read_text.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"read_text — read_text","text":"read_csv() default delimiter NULL.","code":""},{"path":"https://anndata.dynverse.org/reference/read_text.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read_text — read_text","text":"","code":"if (FALSE) { # \\dontrun{ ad <- read_text(\"matrix.tab\") } # }"},{"path":"https://anndata.dynverse.org/reference/read_umi_tools.html","id":null,"dir":"Reference","previous_headings":"","what":"read_umi_tools — read_umi_tools","title":"read_umi_tools — read_umi_tools","text":"Read gzipped condensed count matrix umi_tools.","code":""},{"path":"https://anndata.dynverse.org/reference/read_umi_tools.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"read_umi_tools — read_umi_tools","text":"","code":"read_umi_tools(filename, dtype = \"float32\")"},{"path":"https://anndata.dynverse.org/reference/read_umi_tools.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"read_umi_tools — read_umi_tools","text":"filename File name read . dtype Numpy data type.","code":""},{"path":"https://anndata.dynverse.org/reference/read_umi_tools.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"read_umi_tools — read_umi_tools","text":"","code":"if (FALSE) { # \\dontrun{ ad <- read_umi_tools(\"...\") } # }"},{"path":"https://anndata.dynverse.org/reference/read_zarr.html","id":null,"dir":"Reference","previous_headings":"","what":"Read from a hierarchical Zarr array store. — read_zarr","title":"Read from a hierarchical Zarr array store. — read_zarr","text":"Read hierarchical Zarr array store.","code":""},{"path":"https://anndata.dynverse.org/reference/read_zarr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read from a hierarchical Zarr array store. — read_zarr","text":"","code":"read_zarr(store)"},{"path":"https://anndata.dynverse.org/reference/read_zarr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read from a hierarchical Zarr array store. — read_zarr","text":"store filename, MutableMapping, Zarr storage class.","code":""},{"path":"https://anndata.dynverse.org/reference/read_zarr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read from a hierarchical Zarr array store. — read_zarr","text":"","code":"if (FALSE) { # \\dontrun{ ad <- read_zarr(\"...\") } # }"},{"path":"https://anndata.dynverse.org/reference/write_csvs.html","id":null,"dir":"Reference","previous_headings":"","what":"Write annotation to .csv files. — write_csvs","title":"Write annotation to .csv files. — write_csvs","text":"possible recover full AnnData files. Use write_h5ad() .","code":""},{"path":"https://anndata.dynverse.org/reference/write_csvs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write annotation to .csv files. — write_csvs","text":"","code":"write_csvs(anndata, dirname, skip_data = TRUE, sep = \",\")"},{"path":"https://anndata.dynverse.org/reference/write_csvs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write annotation to .csv files. — write_csvs","text":"anndata AnnData() object dirname Name directory export. skip_data Skip data matrix X. sep Separator data","code":""},{"path":"https://anndata.dynverse.org/reference/write_csvs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write annotation to .csv files. — write_csvs","text":"","code":"if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2, byrow = TRUE),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   varm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) )  write_csvs(ad, \"output\")  unlink(\"output\", recursive = TRUE) } # }"},{"path":"https://anndata.dynverse.org/reference/write_h5ad.html","id":null,"dir":"Reference","previous_headings":"","what":"Write .h5ad-formatted hdf5 file. — write_h5ad","title":"Write .h5ad-formatted hdf5 file. — write_h5ad","text":"Generally, sparse data stored dense matrix, can dramatically improve performance reduce disk space converting csr_matrix:","code":""},{"path":"https://anndata.dynverse.org/reference/write_h5ad.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write .h5ad-formatted hdf5 file. — write_h5ad","text":"","code":"write_h5ad(   anndata,   filename,   compression = NULL,   compression_opts = NULL,   as_dense = list() )"},{"path":"https://anndata.dynverse.org/reference/write_h5ad.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write .h5ad-formatted hdf5 file. — write_h5ad","text":"anndata AnnData() object filename Filename data file. Defaults backing file. compression See h5py filter pipeline. Options \"gzip\", \"lzf\" NULL. compression_opts See h5py filter pipeline. as_dense Sparse AnnData object write dense. Currently supports \"X\" \"raw/X\".","code":""},{"path":"https://anndata.dynverse.org/reference/write_h5ad.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write .h5ad-formatted hdf5 file. — write_h5ad","text":"","code":"if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2, byrow = TRUE),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   varm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) )  write_h5ad(ad, \"output.h5ad\")  file.remove(\"output.h5ad\") } # }"},{"path":"https://anndata.dynverse.org/reference/write_loom.html","id":null,"dir":"Reference","previous_headings":"","what":"Write .loom-formatted hdf5 file. — write_loom","title":"Write .loom-formatted hdf5 file. — write_loom","text":"Write .loom-formatted hdf5 file.","code":""},{"path":"https://anndata.dynverse.org/reference/write_loom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write .loom-formatted hdf5 file. — write_loom","text":"","code":"write_loom(anndata, filename, write_obsm_varm = FALSE)"},{"path":"https://anndata.dynverse.org/reference/write_loom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write .loom-formatted hdf5 file. — write_loom","text":"anndata AnnData() object filename filename. write_obsm_varm Whether also write varm obsm.","code":""},{"path":"https://anndata.dynverse.org/reference/write_loom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write .loom-formatted hdf5 file. — write_loom","text":"","code":"if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2, byrow = TRUE),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   varm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) )  write_loom(ad, \"output.loom\")  file.remove(\"output.loom\") } # }"},{"path":"https://anndata.dynverse.org/reference/write_zarr.html","id":null,"dir":"Reference","previous_headings":"","what":"Write a hierarchical Zarr array store. — write_zarr","title":"Write a hierarchical Zarr array store. — write_zarr","text":"Write hierarchical Zarr array store.","code":""},{"path":"https://anndata.dynverse.org/reference/write_zarr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Write a hierarchical Zarr array store. — write_zarr","text":"","code":"write_zarr(anndata, store, chunks = NULL)"},{"path":"https://anndata.dynverse.org/reference/write_zarr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Write a hierarchical Zarr array store. — write_zarr","text":"anndata AnnData() object store filename, MutableMapping, Zarr storage class. chunks Chunk shape.","code":""},{"path":"https://anndata.dynverse.org/reference/write_zarr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Write a hierarchical Zarr array store. — write_zarr","text":"","code":"if (FALSE) { # \\dontrun{ ad <- AnnData(   X = matrix(c(0, 1, 2, 3), nrow = 2, byrow = TRUE),   obs = data.frame(group = c(\"a\", \"b\"), row.names = c(\"s1\", \"s2\")),   var = data.frame(type = c(1L, 2L), row.names = c(\"var1\", \"var2\")),   varm = list(     ones = matrix(rep(1L, 10), nrow = 2),     rand = matrix(rnorm(6), nrow = 2),     zeros = matrix(rep(0L, 10), nrow = 2)   ),   uns = list(a = 1, b = 2, c = list(c.a = 3, c.b = 4)) )  ad$write_zarr(\"output.zarr\") write_zarr(ad, \"output.zarr\")  unlink(\"output.zarr\", recursive = TRUE) } # }"},{"path":"https://anndata.dynverse.org/news/index.html","id":"anndata-080","dir":"Changelog","previous_headings":"","what":"anndata 0.8.0","title":"anndata 0.8.0","text":"CRAN release: 2025-05-27 FUNCTIONALITY: Added support read_zarr() write_zarr() (PR #33). BUG FIX: Use right interface .equal() function (PR #32). BUG FIX: Add py_to_r converter anndata.abc._AbstractCSDataset (PR #34). MINOR CHANGES: Ignore python warnings running tests (PR #34). MAJOR CHANGES: Update reticulate package dependency management (PR #36). MINOR CHANGES: Clean roxygen code (PR #36). MINOR CHANGES: Use cli generating errors (PR #36).","code":""},{"path":"https://anndata.dynverse.org/news/index.html","id":"anndata-0755","dir":"Changelog","previous_headings":"","what":"anndata 0.7.5.5","title":"anndata 0.7.5.5","text":"CRAN release: 2022-09-23 FUNCTIONALITY: Added initial support loading AnnData backed=TRUE.","code":""},{"path":"https://anndata.dynverse.org/news/index.html","id":"anndata-0754","dir":"Changelog","previous_headings":"","what":"anndata 0.7.5.4","title":"anndata 0.7.5.4","text":"CRAN release: 2022-08-23 BUG FIX: Set dimnames layer views well (#16). BUG FIX: Fix Github Actions R CMD Check, test-coverage pkgdown. DOCUMENTATION: Fix pkgdown config structure adding missing topics. DOCUMENTATION: Regenerate Rd files using current CRAN version roxygen2.","code":""},{"path":"https://anndata.dynverse.org/news/index.html","id":"anndata-0753","dir":"Changelog","previous_headings":"","what":"anndata 0.7.5.3","title":"anndata 0.7.5.3","text":"CRAN release: 2021-09-10 BUG FIX write_h5ad(ad): Fix function pointer (#8). BUG FIX: Add manual converter function converting csc_matrix dgCMatrix (#11).","code":""},{"path":"https://anndata.dynverse.org/news/index.html","id":"anndata-0752","dir":"Changelog","previous_headings":"","what":"anndata 0.7.5.2","title":"anndata 0.7.5.2","text":"CRAN release: 2021-03-28 MINOR CHANGE: Add getters setter internal python objects. MINOR CHANGE: Alter Python objects get converted R vice versa. DOCUMENTATION: Documentation site available https://anndata.dynverse.org! DOCUMENTATION: Added two basic vignettes.","code":""},{"path":"https://anndata.dynverse.org/news/index.html","id":"anndata-0751","dir":"Changelog","previous_headings":"","what":"anndata 0.7.5.1","title":"anndata 0.7.5.1","text":"CRAN release: 2021-02-02 MINOR CHANGE: Add wrapper classes Raw Layers objects. MAJOR CHANGE: Calling ad[..., ...] now correctly returns view ad instead returning matrix. TESTING: Extend tests based theislab/anndata repository.","code":""},{"path":"https://anndata.dynverse.org/news/index.html","id":"anndata-075-2020-11-19","dir":"Changelog","previous_headings":"","what":"anndata 0.7.5 (2020-11-19)","title":"anndata 0.7.5 (2020-11-19)","text":"CRAN release: 2020-11-19 MINOR CHANGES: Updated Python requirements anndata 0.7.5. NEW FEATURE AnnData(): Added obsp, varp, raw objects parameters. TESTING: Added tests based theislab/anndata repository.","code":""},{"path":"https://anndata.dynverse.org/news/index.html","id":"anndata-074-2020-11-04","dir":"Changelog","previous_headings":"","what":"anndata 0.7.4 (2020-11-04)","title":"anndata 0.7.4 (2020-11-04)","text":"CRAN release: 2020-11-04 Initial release","code":""}]
